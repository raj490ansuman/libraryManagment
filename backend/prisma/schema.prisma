datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum SuggestionStatus {
  PENDING
  APPROVED
  REJECTED
  PURCHASED
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  borrowings   Borrowing[]
  reservations Reservation[]
  suggestions  Suggestion[]
  activities   Activity[]
  votes        Vote[]
}

model Book {
  id           Int      @id @default(autoincrement())
  title        String
  author       String
  status       String   @default("available")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime? @map("deleted_at")
  borrowings   Borrowing[]
  reservations Reservation[]
  activities   Activity[]

  @@index([deletedAt])
}

model Borrowing {
  id         Int      @id @default(autoincrement())
  userId     Int
  bookId     Int
  borrowedAt DateTime @default(now())
  dueDate    DateTime
  returnedAt DateTime?
  user       User     @relation(fields: [userId], references: [id])
  book       Book     @relation(fields: [bookId], references: [id])
}

model Reservation {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
}

model Suggestion {
  id          Int             @id @default(autoincrement())
  userId      Int
  title       String
  author      String
  reason      String?
  status      SuggestionStatus @default(PENDING)
  votes       Vote[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?       @map("deleted_at")
  user        User            @relation(fields: [userId], references: [id])
  
  @@index([status])
  @@index([createdAt])
  @@index([deletedAt])
  
  // This is a virtual field that will be computed in the application code
  // It's not stored in the database
  // @@ignore
  // voteCount   Int?            @default(0)
}

model Vote {
  id           Int         @id @default(autoincrement())
  suggestionId Int
  userId       Int
  createdAt    DateTime    @default(now())
  suggestion   Suggestion  @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id])
  
  @@unique([suggestionId, userId], name: "suggestion_user_unique")
  @@index([suggestionId])
  @@index([userId])
}

model Activity {
  id        Int       @id @default(autoincrement())
  type      String    // 'CHECKOUT', 'RETURN', 'RESERVATION', 'SUGGESTION', 'SYSTEM'
  userId    Int
  bookId    Int?
  bookTitle String?   // Denormalized for easier querying
  details   String?   // Additional context like due dates, etc.
  createdAt DateTime  @default(now())
  
  // Relations
  user      User      @relation(fields: [userId], references: [id])
  book      Book?     @relation(fields: [bookId], references: [id])
  
  @@index([userId])
  @@index([createdAt])
}
