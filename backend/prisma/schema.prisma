datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  borrowings   Borrowing[]
  reservations Reservation[]
  suggestions  Suggestion[]
  activities   Activity[]
}

model Book {
  id           Int      @id @default(autoincrement())
  title        String
  author       String
  status       String   @default("available")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  borrowings   Borrowing[]
  reservations Reservation[]
  activities   Activity[]
}

model Borrowing {
  id         Int      @id @default(autoincrement())
  userId     Int
  bookId     Int
  borrowedAt DateTime @default(now())
  dueDate    DateTime
  returnedAt DateTime?
  user       User     @relation(fields: [userId], references: [id])
  book       Book     @relation(fields: [bookId], references: [id])
}

model Reservation {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
}

model Suggestion {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  author    String
  reason    String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Activity {
  id        Int       @id @default(autoincrement())
  type      String    // 'CHECKOUT', 'RETURN', 'RESERVATION', 'SUGGESTION', 'SYSTEM'
  userId    Int
  bookId    Int?
  bookTitle String?   // Denormalized for easier querying
  details   String?   // Additional context like due dates, etc.
  createdAt DateTime  @default(now())
  
  // Relations
  user      User      @relation(fields: [userId], references: [id])
  book      Book?     @relation(fields: [bookId], references: [id])
  
  @@index([userId])
  @@index([createdAt])
}
